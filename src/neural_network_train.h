#ifndef NEURAL_NETWORK_TRAIN
#define NEURAL_NETWORK_TRAIN

#include "neural_network.h"

//
// 'neural_network_train.h' definitions
//

typedef struct {
    matrix_t outputs;
    matrix_t derivatives;
    matrix_t errors;
} neural_network_evaluation_layer_t;

typedef struct {
    neural_network_evaluation_layer_t *layers;
    double *all_data;
} neural_network_evaluation_t;

/**
 * Initialize the inputted evaluation to have an evaluation layer per hidden / output layer of the inputted network.
 * @param nn The neural network for the evaluation struct to imitate.
 * @param eval The neural network evaluation to be modified.
 */
void neural_network_evaluation_initialize(neural_network_t *nn, neural_network_evaluation_t *eval);

/**
 * Free the memory referenced in the inputted evaluation struct. Intended to be used with structs initialized with 'neural_network_evaluation_initialize'.
 * @param eval The evaluation struct to have it's members freed.
 */
void neural_network_evaluation_delete(neural_network_evaluation_t eval);

/**
 * For the given input, get the neural network's output and derivatives at each hidden / output layer.
 * @param nn The neural network to apply the inputs to.
 * @param input The input that the neural network generates outputs from.
 * @param eval The evaluation struct to store the outputs and derivatives in.
 */
void neural_network_evaluation_outputs(neural_network_t *nn, matrix_t *input, neural_network_evaluation_t eval);

/**
 * Given an evaluation struct which contains outputs and derivatives, calculate the errors at each layer using these values, as well as the weights and biases of the inputted neural network.
 * @param nn The neural network whose weights and biases are used to calculate the evaluation errors.
 * @param output The output which is compared to the evaluation struct's output layer.
 * @param eval The evaluation struct to store the errors at each layer.
 */
void neural_network_evaluation_errors(neural_network_t *nn, matrix_t *output, neural_network_evaluation_t eval);

/**
 * Given an evaluations struct which contains the errors of each layer of the neural network, calculate the errors in the inputted neural network's weights and biases, and correct them proportional to the inputted training parameter.
 * @param nn The neural network to have it's weights and biases corrected.
 * @param input The input which the neural network is being evaluated against.
 * @param eval The evaluation struct which contains the errors generated by the neural network.
 * @param p The training parameter. Errors in the network's weights and biases will be corrected proportional to this value.
 */
void neural_network_evaluation_apply(neural_network_t *nn, matrix_t *input, neural_network_evaluation_t eval, double p);

/**
 * Train the neural network on a single case.
 * @param nn The neural network to train.
 * @param input The input matrix to evaluate the neural network on.
 * @param output The matrix representing the expected output of the neural network.
 * @param p The training parameter. Weights will be adjusted proportional to this parameter.
*/
void neural_network_train_case(neural_network_t *nn, matrix_t *input, matrix_t *output, double p);

#endif
